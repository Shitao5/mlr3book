```{r authors, include = FALSE, cache = FALSE}
## Adds chapter authors to TOC and chapter header
##  x - Named list, names are author name, entries are affiliations
authors = function(chaptitle) {
  authors = unlist(strsplit(data.table::fread("../../common/chap_auths.csv")[Title == chaptitle, Authors], ", "))
  if (is.null(authors)) stop(sprintf("Chapter %s not found", chaptitle))
  affils = data.table::fread("../../common/authors.csv")[authors, on = "Author", Affiliations]

  quarto_fmt = "**%s** \\newline <br>  *%s* \n "
  latex_fmt = "\\addtocontents{toc}{\\textit{%s}}"

  quarto_out = paste0(sprintf(quarto_fmt, authors, affils), collapse = "\n ")
  if (length(authors) == 1) {
    latex_out = sprintf(latex_fmt, authors)
  } else {
    latex_out = paste0(authors, collapse = ", ")
    ind = tail(gregexpr(",", latex_out)[[1]], 1)
    latex_out = paste(substr(latex_out, 1, ind - 1), "and", substr(latex_out, ind + 2, nchar(latex_out)))
    latex_out = sprintf(latex_fmt, latex_out)
  }

  paste0("\\vspace{-15mm}", latex_out, quarto_out, "\\newline \\newline <br><br> ", collapse = " ")
}

citeas = function(chaptitle) {
  authors = unlist(strsplit(data.table::fread("../../common/chap_auths.csv")[Title == chaptitle, Authors], ", "))
  if (is.null(authors)) stop(sprintf("Chapter %s not found", chaptitle))
  authors = paste0(vapply(strsplit(authors, " "), function(.x) {
    paste(.x[[length(.x)]], paste(substr(.x[seq(1, length(.x) - 1)], 1, 1), collapse = ""))
  }, character(1)), collapse = ", ")
  chaphtml = paste0(paste0(tolower(strsplit(chaptitle, " ")[[1]]), collapse = "_"), ".html")
  sprintf("## Citation
  Please cite this chapter as:

  %s. (2024). %s. In Bischl B, Sonabend R, Kotthoff L, Lang M, (Eds.), *Applied Machine Learning Using mlr3 in R*. CRC Press. https://mlr3book.mlr-org.com/%s.", authors, chaptitle, chaphtml)
}
```

```{r define, include = FALSE, cache = FALSE}
tdefine = function(...) {
  x = as.list(...)
  x$aside = TRUE
  do.call(index, x)
}

cdefine = function(...) {
  x = as.list(...)
  if (grepl("\\$|_|\\(\\)", x[[1]])) x$code = TRUE
  x$aside = TRUE
  do.call(index, x)
}

cindex = function(...) {
  x = as.list(...)
  if (grepl("\\$|_|\\(\\)", x[[1]])) x$code = TRUE
  do.call(index, x)
}
```

```{r include_multi_graphics, include = FALSE, cache = FALSE}
include_multi_graphics = function(fig_name) {
  fmt = if (knitr::is_latex_output()) "png" else "svg"
  knitr::include_graphics(sprintf("Figures/%s.%s", fig_name, fmt), dpi = 600)
}
```
